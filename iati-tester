#!/usr/bin/env python
from foxpath import test
import unicodecsv
import os
from IATISimpleTester import config, helpers
import optparse
import sys


headers = [
           'result',
           'iati-identifier',
           'hierarchy',
           'test-name',
           'package-name',
           'current-result',
            ]

def get_xml_in_dir(start_string, relative_dir):
    filenames = []

    current_script_dir = os.path.dirname(os.path.abspath(__file__))
    thedir = os.path.join(current_script_dir, os.path.abspath(relative_dir))

    for file in os.listdir(thedir):
        if (file.startswith(start_string) and file.endswith(".xml")):
            abs_filename = os.path.join(thedir, file)
            filenames.append({'absolute_filename': abs_filename,
                              'filename': file,
                              'name': os.path.splitext(file)[0]})
    return filenames

def run_tests(packages, csvfile, tests):

    def write_row(a, package, t_name):
        a['test-name'] = t_name
        a['package-name'] = package['name']
        writer.writerow(a)

    def write_package(package):
        print "Testing and writing for package", package['name']
        for atest in tests:
            for a in test.test_doc_json_out(package['absolute_filename'],
                atest['expression'], config.CURRENT_TEST, config.LISTS)['activities']:

                write_row(a, package, atest['name'])

    print "Opening new CSV file, beginning testing"

    writer = unicodecsv.DictWriter(csvfile, headers)
    hdict = dict([(h,h) for h in headers])
    writer.writerow(hdict)

    for package in packages:
        write_package(package)

    print "Complete"

def run_packagegroup_tests(options):
    if options.packagegroup:
        package_group_name = options.packagegroup
    else:
        package_group_name = config.PACKAGEGROUP_NAME

    packages = get_xml_in_dir(package_group_name, config.DIR_FOR_TESTING)

    def wrapped_run_tests():
        if options.tests_file:
            tests = helpers.load_expressions_from_csvfile(options.tests_file)
        else:
            tests = config.TESTS
        if options.output_file:
            output_stream = open(options.output_file, 'w')
        else:
            output_stream = sys.stdout

        return run_tests(packages, output_stream, tests)

    wrapped_run_tests()

def get_options():
    parser = optparse.OptionParser()
    parser.add_option("--package-group", dest="packagegroup",
                      action="store")
    parser.add_option("--tests-file", dest="tests_file", action="store")
    parser.add_option("--output-file", dest="output_file", action="store")
    options, rest = parser.parse_args()
    return options

if __name__ == "__main__":
    options = get_options()
    run_packagegroup_tests(options)
